{"version":3,"sources":["services.js","Login.jsx","UserList.jsx","MessageList.jsx","SendMessage.jsx","Chat.jsx","App.jsx","serviceWorker.js","index.js"],"names":["addUser","username","fetch","method","headers","Headers","body","JSON","stringify","catch","err","Promise","reject","details","then","response","ok","resolve","statusCode","login","user","json","logout","getUsers","credentials","getMessages","sendMessage","message","Login","onLogin","useState","setUsername","errorMessage","setErrorMessage","loginButtonEnabled","setLoginButtonEnabled","className","type","placeholder","value","onChange","e","inputText","target","id","disabled","onClick","UserList","users","setUsers","useEffect","userList","map","i","key","alt","src","image","sender","timestamp","MessageList","messages","text","SendMessage","props","setMessage","sendButtonEnabled","setSendButtonEnabled","name","refreshMessages","Chat","onLogout","setMessages","useCallback","messagelist","intervalId","setInterval","clearInterval","App","setUser","console","warn","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.22a4b525.chunk.js","sourcesContent":["export const addUser = ({username}) => {\n  return fetch('/users', {\n    method: 'POST',\n    headers: new Headers({ 'content-type': 'application/json' }),\n    body: JSON.stringify({username}),\n  })\n  .catch( err => {\n    return Promise.reject({ err: 'network-issue', details: err });\n  })\n  .then( response => { \n    if( response.ok ) {\n      return Promise.resolve(response);\n    }\n    return Promise.reject({ err: 'server-error', details: response.statusCode });\n  });\n};\n\nexport const login = ({user}) => {\n  return fetch('/login', {\n    method: 'POST',\n    headers: new Headers({ 'content-type': 'application/json' }),\n    body: JSON.stringify({ user }),\n  })\n  .catch( err => {\n    return Promise.reject({ err: 'network-issue', details: err });\n  })\n  .then( response => {\n    if( response.ok ) {\n      return response.json();\n    }\n    return Promise.reject({ err: 'server-error', details: response.statusCode });\n  });\n};\n\nexport const logout = () => {\n  return fetch('/logout', {\n    method: 'GET',\n  })\n  .catch( err => {\n    return Promise.reject({ err: 'network-issue', details: err });\n  })\n  .then( response => {\n    if( response.ok ) {\n      return response.json();\n    }\n    return Promise.reject({ err: 'server-error', details: response.statusCode });\n  });\n};\n\n\n\nexport const getUsers = (() => {\n  return fetch('/users/', {\n    method: 'GET', // the default, just here to be explicit\n    credentials: 'include',  // use cooki\n  })\n  .catch( err => {\n    return Promise.reject({ err: 'network-issue', details: err });\n  })\n  .then( response => {\n    if( response.ok ) {\n      return response.json();\n    }\n    return Promise.reject({ err: 'server-error', details: response.statusCode });\n  });\n});\n\nexport const getMessages = ((user) => {\n  return fetch('/messages/', {\n    method: 'GET', \n    credentials: 'include', \n  })\n  .catch( err => {\n    return Promise.reject({ err: 'network-issue', details: err });\n  })\n  .then( response => {\n    if( response.ok ) {\n      return response.json();\n    }\n    return Promise.reject({ err: 'server-error', details: response.statusCode });\n  });\n});\n\nexport const sendMessage = ({message}) => {\n  return fetch('/messages/', {\n    method: 'POST',\n    headers: new Headers({ 'content-type': 'application/json' }),\n    body: JSON.stringify({message}),\n    credentials: 'include',\n  })\n  .catch( err => {\n    return Promise.reject({ err: 'network-issue', details: err });\n  })\n  .then( response => { \n    if( response.ok ) {\n      return Promise.resolve(response);\n    }\n    return Promise.reject({ err: 'server-error', details: response.statusCode });\n  });\n};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addUser } from './services';\n\nfunction Login({onLogin}){\n\tconst [username, setUsername] = useState(\"\");\n\tconst [errorMessage, setErrorMessage] = useState(\"\");\n\tconst [loginButtonEnabled, setLoginButtonEnabled] = useState(true);\n\n\tconst handleInput = ((inputText) => {\n        setUsername(inputText);\n        if(inputText === \"\"){\n            setLoginButtonEnabled(true);\n        }\n        else{\n            setLoginButtonEnabled(false);\n        }\n\t});\n\t\n\tconst handleUsername = (() => {\n\t\tif(username === \"\"){\n\t\t\tsetErrorMessage(\"Username cannot be empty\");\n\t\t}\n\t\telse{\n\t\t\tsetErrorMessage(\"\");\n\t\t\taddUser({username})\n\t\t\t.then( function(response) {\n\t\t\t\tonLogin(username)\n\t\t\t})\n\t\t\t.catch(function(e) {\n\t\t\t\tsetErrorMessage(e.message);\n\t\t\t});\n\n\t\t}\n\t});\n\n\treturn (\n\t\t<div className = \"login-page\">\n\t\t\t<div className=\"login-box\">\n\t\t\t\t<h1>Login :</h1>\n\t\t\t\t<input type=\"text\" placeholder=\"Enter username\" value={username}\n\t\t\t\t\tonChange={ e => handleInput(e.target.value) }\n\t\t\t\t/>\n\t\t\t\t<span id=\"errorMessage\">{errorMessage}</span>\n\t\t\t\t<button id=\"submit-button\" type=\"submit\" disabled={loginButtonEnabled} onClick={handleUsername}>Login</button>\n\t\t\t</div>\n\t\t</div>\t\n  \t);\n }\n\nLogin.propTypes = {\n  error: PropTypes.string\n};\n\nexport default Login;\n\n","import React, { useState, useEffect } from 'react';\nimport {getUsers} from './services';\n\nfunction UserList({setErrorMessage}) {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    getUsers()\n    .then( userList => { \n      setUsers(userList);\n    })\n    .catch(function(e){\n      setErrorMessage(e.message);\n    });\n  }, []);\n  \n  const userList = users.map( function (user,i){\n      return <li key={i}>\n        <div>\n          <div className=\"user-icon-content\">\n              <img className=\"user-icon\" alt=\"user icon\" src={user.image}/>\n          </div>\n          <span className=\"userlist-username\">{user.sender}</span>\n          <span className=\"timestamp-sidebar\">{user.timestamp}</span>\n        </div>\n      </li> \n    }\n  );\n\n  return (\n    <ul className=\"users\">\n       {userList} \n    </ul>\n  );\n};\n\nexport default UserList;","import React from 'react';\n\nfunction MessageList({messages}){\n\treturn (\n   <ol className=\"message-list\"> \n    {\n    messages.map( function (message,i){\n      return  <li key={i} className=\"message-cell\">\n          <div className=\"chat-cell\">\n              <img className=\"user-icon\" alt=\"user icon\" src={message.image}/>\n              <span className=\"messagelist-username\">{message.sender}</span>\n          </div>\n          <div className=\"chat-cell-text {'__' + message.sender + '__'}\">\n            <span>{message.text}</span>\n            <br/>\n            <span className=\"timestamp\">\n              {message.timestamp}\n            </span>\n          </div>\n      </li>\n    })\n    }\n    </ol>\n\t);\n};\n\nexport default MessageList;","import React, { useState } from 'react';\nimport {sendMessage} from './services';\n\n\nfunction SendMessage({props}){\n    const [message, setMessage] = useState(\"\");\n    const [sendButtonEnabled, setSendButtonEnabled] = useState(true);\n\n    const handleInput = ((inputText) => {\n        setMessage(inputText);\n        if(inputText === \"\"){\n            setSendButtonEnabled(true);\n        }\n        else{\n            setSendButtonEnabled(false);\n        }\n    });\n\n    const handleMessage  = (() => {\n        sendMessage({message})\n\t\t\t.then( function(response) {\n                setMessage(\"\");\n                props.refreshMessages();\n\t\t\t})\n\t\t\t.catch(function(e) {\n                props.setErrorMessage(e.message);\n\t\t\t});\n    });\n\n    return (\n        <div >               \n            <input type=\"text\" className=\"to-send\" name=\"text\" id =\"message-text\" value={message} placeholder=\"Enter message to send\" onChange={ e => handleInput(e.target.value)}/>\n            <button id=\"send-button\" type=\"submit\" disabled={sendButtonEnabled} onClick={handleMessage}>Send</button>\n        </div>\n    );\n}\n\nexport default SendMessage;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport UserList from './UserList';\nimport MessageList from './MessageList';\nimport SendMessage from './SendMessage';\nimport {getMessages} from './services';\n\nfunction Chat({onLogout, user}){\n\tconst [messages, setMessages] = useState([]);\t\n\tconst [errorMessage, setErrorMessage] = useState([]);\n\n\tconst REFRESH_TIME_IN_MS = 3000;\n\n\tconst refreshMessages = useCallback(() => {\n\t\t\tgetMessages()\n\t\t\t.then( messagelist => { \n\t\t\tsetMessages(messagelist);\n\t\t\t})\n\t\t\t.catch(function(e){\n\t\t\t\tsetErrorMessage(e.message);\n\t\t\t});\n\t},[]);\n\n\tuseEffect(() => {\n\t\tif(user){\n\t\t\trefreshMessages();\n\t\t\tconst intervalId = setInterval( () => {\n\t\t\t\trefreshMessages();\n\t\t\t}, REFRESH_TIME_IN_MS );\n\t\t\treturn function cleanup() {\n\t\t\t\tclearInterval(intervalId);\n\t\t\t};\n\t\t}\n\t}, [refreshMessages]);\n\n\treturn(\n\t\t<div id=\"chat-app\">\n\t\t\t<div className=\"chat-topbar\">\n                <div id=\"title\">\n                  <h2>Welcome to group chat</h2>\n                </div>\n                <button type=\"submit\" className=\"topbar-button\" onClick={refreshMessages}>Refresh</button>\n                <button type=\"submit\" className=\"topbar-button\" onClick={onLogout}>Logout</button>\n\t\t\t\t<div className=\"error-message\">{errorMessage}</div>\n            </div>\n\t\t\t<div className=\"chat-content\">\n\t\t\t\t<div id=\"side-bar\">\n \t\t\t\t\t<UserList setErrorMessage={setErrorMessage}/>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"message-window\">\n\t\t\t\t\t<MessageList messages={messages}/>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"outgoing\">\n\t\t\t\t\t<SendMessage props={{refreshMessages:refreshMessages, setErrorMessage:setErrorMessage}}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Chat;","import React, { useState } from 'react';\nimport './App.css';\nimport Login from './Login';\nimport Chat from './Chat';\nimport { login, logout} from './services';\n\nfunction App() {\n\tconst [user, setUser] = useState(\"\");\n\n\tconst onLogin = (user) => {\n\t\tlogin({user})\n\t\t.then( data => {\n\t\t  setUser(user);\n\t\t})\n\t\t.catch( err => {\n\t\t\tconsole.warn('error in user Login');\n\t\t});\n\t\n\t};\n\n\tconst onLogout = () => {\n\t\tlogout()\n\t\t.then( () => { \n\t\t  setUser(\"\");\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.warn('error in user Logout');\n\t\t});\n\t}\n\n\n \tif(user && user!=\"\"){\n\t\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Chat onLogout={onLogout} user={user}/> \n\t\t</div>\n\t\t);\n \t}\n \telse{\n\t\treturn(\n\t\t<div className=\"App\">\n\t\t\t<Login onLogin={onLogin}/>\n\t\t</div>\n\t\t);\n \t}\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}