{"version":3,"sources":["services.js","Login.jsx","StockList.jsx","AddStock.jsx","StockApp.jsx","App.jsx","serviceWorker.js","index.js"],"names":["login","username","fetch","method","headers","Headers","body","JSON","stringify","catch","err","Promise","reject","details","then","response","ok","json","status","addUser","resolve","addStock","stockname","credentials","getStocks","refreshStocks","updateStock","quantity","equity","deleteStock","logout","Login","onLogin","errorMessage","setErrorMessage","useState","setUsername","loginButtonDisabled","setLoginButtonDisabled","regExp","handleUsername","test","e","message","className","type","placeholder","value","onChange","inputText","target","onKeyUp","key","id","disabled","onClick","StockList","stocks","relaodStocks","setValue","updateButtonDisabled","setUpdateButtonDisabled","handleUpdateStock","index","split","handlDeleteStock","map","stockMap","dateTime","Date","formattedDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","quantityText","parseInt","toFixed","handleQuantityChange","AddStock","setStockname","name","REFRESH_TIME_IN_MS","StockApp","onLogout","setStocks","useCallback","stocklist","handleRefreshStocks","useEffect","intervalId","setInterval","clearInterval","App","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAAaA,G,MAAQ,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACnB,OAAOC,MAAM,SAAU,CACrBC,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CAAE,eAAgB,qBACvCC,KAAMC,KAAKC,UAAU,CAACP,eAEvBQ,OAAO,SAAAC,GACN,OAAOC,QAAQC,OAAO,CAAEF,IAAK,gBAAiBG,QAAS,qBAExDC,MAAM,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEW,MAApBF,EAASG,OACTP,QAAQC,OAAO,kCAEK,MAApBG,EAASG,OACPP,QAAQC,OAAO,yBAGjBD,QAAQC,OAAO,qBAKjBO,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SACrB,OAAOC,MAAM,SAAU,CACrBC,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CAAE,eAAgB,qBACvCC,KAAMC,KAAKC,UAAU,CAACP,eAEvBQ,OAAO,SAAAC,GACN,OAAOC,QAAQC,OAAO,CAAEF,IAAK,gBAAiBG,QAAS,qBAExDC,MAAM,SAAAC,GACL,OAAIA,EAASC,GACJL,QAAQS,QAAQL,GAEI,MAApBA,EAASG,OACTP,QAAQC,OAAO,kCAEK,MAApBG,EAASG,OACPP,QAAQC,OAAO,yBAGjBD,QAAQC,OAAO,oBAKjBS,EAAW,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,UAAWrB,EAAc,EAAdA,SACjC,OAAOC,MAAM,UAAW,CACtBC,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CAAE,eAAgB,qBACvCC,KAAMC,KAAKC,UAAU,CAACc,YAAUrB,aAChCsB,YAAa,YAEdd,OAAO,SAAAC,GACN,OAAOC,QAAQC,OAAO,CAAEF,IAAK,gBAAiBG,QAASH,OAExDI,MAAM,SAAAC,GACL,OAAIA,EAASC,GACJL,QAAQS,QAAQL,GAEI,MAApBA,EAASG,OACTP,QAAQC,OAAO,kCAEK,MAApBG,EAASG,OACPP,QAAQC,OAAO,yBAGjBD,QAAQC,OAAO,oBAKjBY,EAAa,WACtB,OAAOtB,MAAM,UAAW,CACtBC,OAAQ,MACRoB,YAAa,YAEdd,OAAO,SAAAC,GACN,OAAOC,QAAQC,OAAO,CAAEF,IAAK,gBAAiBG,QAASH,OAExDI,MAAM,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEW,MAApBF,EAASG,OACTP,QAAQC,OAAO,kCAEK,MAApBG,EAASG,OACPP,QAAQC,OAAO,yBAGjBD,QAAQC,OAAO,oBAIjBa,EAAiB,WAC1B,OAAOvB,MAAM,iBAAkB,CAC7BC,OAAQ,MACRoB,YAAa,YAEdd,OAAO,SAAAC,GACN,OAAGA,EACMC,QAAQC,OAAO,CAAEF,IAAK,gBAAiBG,QAASH,IAEhDC,QAAQC,OAAO,CAAEF,IAAK,gBAAiBG,QAAQ,qBAEzDC,MAAM,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEW,MAApBF,EAASG,OACTP,QAAQC,OAAO,kCAEK,MAApBG,EAASG,OACPP,QAAQC,OAAO,yBAGjBD,QAAQC,OAAO,oBAKjBc,EAAc,SAAC,GAAmC,IAAlCJ,EAAiC,EAAjCA,UAAWK,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,OAC9C,OAAO1B,MAAM,UAAW,CACtBC,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CAAE,eAAgB,qBACvCC,KAAMC,KAAKC,UAAU,CAACc,YAAWK,WAAUC,WAC3CL,YAAa,YAEdd,OAAO,SAAAC,GACN,OAAOC,QAAQC,OAAO,CAAEF,IAAK,gBAAiBG,QAASH,OAExDI,MAAM,SAAAC,GACL,OAAIA,EAASC,GACJL,QAAQS,QAAQL,GAEI,MAApBA,EAASG,OACTP,QAAQC,OAAO,kCAEK,MAApBG,EAASG,OACPP,QAAQC,OAAO,yBAGjBD,QAAQC,OAAO,oBAIjBiB,EAAc,SAAC,GAAiB,IAAhBP,EAAe,EAAfA,UACzB,OAAOpB,MAAM,UAAW,CACtBC,OAAQ,SACRC,QAAS,IAAIC,QAAQ,CAAE,eAAgB,qBACvCC,KAAMC,KAAKC,UAAU,CAACc,cACtBC,YAAa,YAEdd,OAAO,SAAAC,GACN,OAAOC,QAAQC,OAAO,CAAEF,IAAK,gBAAiBG,QAASH,OAExDI,MAAM,SAAAC,GACL,OAAIA,EAASC,GACJL,QAAQS,QAAQL,GAEI,MAApBA,EAASG,OACTP,QAAQC,OAAO,kCAEK,MAApBG,EAASG,OACPP,QAAQC,OAAO,yBAGjBD,QAAQC,OAAO,oBAIjBkB,EAAS,WAClB,OAAO5B,MAAM,UAAW,CACtBC,OAAQ,MACRoB,YAAa,YAEdd,OAAO,SAAAC,GACN,OAAOC,QAAQC,OAAO,CAAEF,IAAK,gBAAiBG,QAASH,OAExDI,MAAM,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEW,MAApBF,EAASG,OACTP,QAAQC,OAAO,kCAEK,MAApBG,EAASG,OACPP,QAAQC,OAAO,yBAGjBD,QAAQC,OAAO,oBCrIdmB,MA1DhB,YAA0D,IAA1CC,EAAyC,EAAzCA,QAAUC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,gBAAiB,EACrBC,mBAAS,IADY,mBAC9ClC,EAD8C,KACpCmC,EADoC,OAGFD,oBAAS,GAHP,mBAGjDE,EAHiD,KAG5BC,EAH4B,KAqBlDC,EAAS,iBAENC,EAAkB,WACV,KAAbvC,EACFiC,EAAgB,4BAERK,EAAOE,KAAKxC,IAIpBiC,EAAgB,IAChBf,EAAQ,CAAClB,aACRa,MAAM,SAASC,GACfiB,EAAQ/B,MAERQ,OAAM,SAASiC,GACZA,EAAEC,QACJT,EAAgBQ,EAAEC,SAElBT,EAAgB,sBAZlBA,EAAgB,mDAiBf,OACF,yBAAKU,UAAY,cAChB,yBAAKA,UAAU,aACd,qCACA,2BAAOC,KAAK,OAAOC,YAAY,iBAAiBC,MAAO9C,EACtD+C,SAAW,SAAAN,GAAC,OA7CSO,EA6COP,EAAEQ,OAAOH,MA5ClCX,EAAYa,QAERX,EADa,KAAdW,GAFc,IAACA,GA6CwBE,QAnC9B,SAACT,GACA,UAAVA,EAAEU,KACDZ,OAkCR,6BAAK,0BAAMI,UAAU,gBAAgBX,IACrC,4BAAQoB,GAAG,gBAAgBR,KAAK,SAASS,SAAUjB,EAAqBkB,QAASf,GAAjF,Y,OCsCWgB,MA3Ff,YAA4D,IAAxCC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,aAAcxB,EAAiB,EAAjBA,gBAAiB,EAE9BC,mBAAS,GAFqB,mBAEjDY,EAFiD,KAE1CY,EAF0C,OAGAxB,oBAAS,GAHT,mBAGjDyB,EAHiD,KAG3BC,EAH2B,KAKlDC,EAAqB,SAACpB,GACzB,IACMqB,EADcrB,EAAEQ,OAAOG,GACHW,MAAM,KAAK,GAC/B1C,EAAYmC,EAAOM,GAAP,UACZpC,EAAW8B,EAAOM,GAAP,SACXnC,EAAS6B,EAAOM,GAAP,OACfrC,EAAY,CAACJ,YAAWK,WAAUC,WACjCd,MAAM,WACJ+C,GAAwB,MAE1BpD,OAAM,SAASiC,GACbR,EAAgB,2BAA6BQ,OAqB7CuB,EAAoB,SAACvB,GACxB,IACMqB,EADcrB,EAAEQ,OAAOG,GACHW,MAAM,KAAK,GAC/B1C,EAAYmC,EAAOM,GAAP,UAClBlC,EAAY,CAACP,cACZR,MAAK,WACH4C,OAEFjD,OAAM,SAASiC,GACbR,EAAgB,2BAA6BQ,OAIrD,OACE,6BACA,oDACA,wBAAIE,UAAU,cACX,wBAAIA,UAAU,qBACX,6BACA,6CACA,sCACA,2DACA,yCACA,4CACA,gCAILa,EAAOS,KAAI,SAACC,EAASJ,GACnB,IAAMK,EAAW,IAAIC,KAAKF,EAAQ,iBAC5BG,EAAgBF,EAASG,cAAgB,KAAOH,EAASI,WAAa,GAAK,IAAMJ,EAASK,UAC9F,IAAML,EAASM,WAAa,IAAMN,EAASO,aAAe,IAAMP,EAASQ,aAE3E,OAAQ,wBAAIhC,UAAU,aAAaQ,IAAKW,GAC5B,6BACA,6BAAMI,EAAQ,WACd,6BAAMA,EAAQ,OACd,6BAAMG,GACN,6BACG,2BAAO1B,UAAU,iBAAiBC,KAAK,OAAOQ,GAAIU,EAAOhB,MAAOoB,EAAQ,SACvEnB,SAAW,SAAAN,GAAC,OAzDD,SAACA,GAC5B,IAAMmC,EAAenC,EAAEQ,OAAOH,MACV,KAAjB8B,IACY,4BAAZA,EAAe,GAElB,IAAMd,EAAQrB,EAAEQ,OAAOG,GAEvB,GADc,QAAQZ,KAAKoC,GAClB,CACN,IAAMlD,EAAWmD,SAASD,GAC1BpB,EAAOM,GAAP,SAA4BpC,EAC5B,IAAIC,EAAS6B,EAAOM,GAAP,MAAyBpC,EACtC8B,EAAOM,GAAP,OAA0BnC,EAAOmD,QAAQ,GACzClB,GAAwB,GACxBF,GAAQ,uBAAGZ,KA4CkBiC,CAAqBtC,MACtC,4BAASW,GAAIU,EAAM,QAAST,SAAUM,EAAsBL,QAASO,GAArE,WAEH,6BAAMK,EAAQ,QACd,6BAAK,4BAAQd,GAAIU,EAAM,UAAWR,QAASU,GAAtC,mBCpDRgB,MA7Bf,YAA4C,IAAzBhF,EAAwB,EAAxBA,SAAUyD,EAAc,EAAdA,aAAc,EACLvB,mBAAS,IADJ,mBAChCb,EADgC,KACrB4D,EADqB,OAEC/C,mBAAS,IAFV,mBAEhCF,EAFgC,KAElBC,EAFkB,KAoBvC,OACI,yBAAKU,UAAU,UACX,2BAAOC,KAAK,OAAOsC,KAAK,OAAOpC,MAAOzB,EAAWwB,YAAY,4BAA4BE,SAAW,SAAAN,GAAC,OAlBtFO,EAkBuGP,EAAEQ,OAAOH,WAjBnImC,EAAajC,GADK,IAACA,KAmBf,4BAAQJ,KAAK,SAASU,QAfR,WAClBlC,EAAS,CAACC,YAAUrB,aACxBa,MAAM,SAASC,GACHmE,EAAa,IACbhD,EAAgB,IAChBwB,OAEZjD,OAAM,SAASiC,GACHR,EAAgB,8BAOpB,OACA,6BAAK,0BAAMU,UAAU,gBAAgBX,MCtB3CmD,EAAqB,IAoDZC,MAlDf,YAAuE,IAApDC,EAAmD,EAAnDA,SAAUrF,EAAyC,EAAzCA,SAAwBiC,GAAiB,EAA/BD,aAA+B,EAAjBC,iBAAiB,EAEvCC,mBAAS,IAF8B,mBAE5DsB,EAF4D,KAEpD8B,EAFoD,KAK7D7B,EAAe8B,uBAAY,WAC9BhE,IACCV,MAAM,SAAA2E,GACJF,EAAUE,MAEZhF,OAAM,SAASC,GACbwB,EAAgBxB,QAEpB,IAEIgF,EAAsBF,uBAAY,WACrC/D,IACCX,MAAM,WACJ4C,OAEFjD,OAAM,SAASC,GACbwB,EAAgBxB,QAEpB,IAcJ,OAZEiF,qBAAU,WACP,GAAG1F,EAAS,CACTyF,IACN,IAAME,EAAaC,aAAa,WAC/BH,MACEN,GACH,OAAO,WACNU,cAAcF,OAGb,IAGF,6BACG,yBAAKhD,UAAU,WACZ,6CAAmB3C,GACnB,4BAAQsD,QAASmC,GAAjB,WACA,4BAAQnC,QAAS+B,GAAjB,WAEH,kBAAC,EAAD,CAAUrF,SAAUA,EAAUyD,aAAcA,IAC5C,kBAAC,EAAD,CAAWD,OAAQA,EAAQC,aAAcA,EAAcxB,gBAAiBA,MCL/D6D,MAzCf,WAAgB,IAAD,EACkB5D,mBAAS,IAD3B,mBACPlC,EADO,KACGmC,EADH,OAE6BD,mBAAS,IAFtC,mBAEJF,EAFI,KAEUC,EAFV,KAwBd,OAAGjC,EAEF,yBAAK2C,UAAU,OACd,6BAAK,0BAAMA,UAAU,gBAAgBX,IACrC,kBAAC,EAAD,CAAUqD,SAdK,WAChBxD,IACChB,MAAM,WACNsB,EAAY,OAEZ3B,OAAM,SAAAC,GACNwB,EAAgB,4BAQcjC,SAAUA,EAAUgC,aAAcA,EAAcC,gBAAiBA,KAMhG,yBAAKU,UAAU,OACd,kBAAC,EAAD,CAAOZ,QA/BU,SAAC/B,GACnBD,EAAM,CAACC,aACNa,MAAM,SAAAkF,GACN5D,EAAYnC,MAEZQ,OAAO,SAAAC,GACPwB,EAAgB,2BAyBSD,aAAcA,EAAcC,gBAAiBA,MC7BrD+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9F,MAAK,SAAA+F,GACjCA,EAAaC,kB","file":"static/js/main.849ea6c7.chunk.js","sourcesContent":["export const login = ({username}) => {\n    return fetch('/login', {\n      method: 'POST',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({username}),\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: \"network error\" });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      else if (response.status === 403){\n        return Promise.reject('You are not an authorized user');\n      }\n      else if (response.status === 401){\n          return Promise.reject('You must be logged in');\n      }\n      else{\n        return Promise.reject('Server error');\n      }\n    });\n };\n  \nexport const addUser = ({username}) => {\n    return fetch('/users', {\n      method: 'POST',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({username}),\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: \"network error\" });\n    })\n    .then( response => { \n      if( response.ok ) {\n        return Promise.resolve(response);\n      }\n      else if (response.status === 403){\n        return Promise.reject('You are not an authorized user');\n      }\n      else if (response.status === 401){\n          return Promise.reject('You must be logged in');\n      }\n      else{\n        return Promise.reject('Server error');\n      }\n    });\n};\n\nexport const addStock = ({stockname, username}) => {\n    return fetch('/stocks', {\n      method: 'POST',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({stockname,username}),\n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => { \n      if( response.ok ) {\n        return Promise.resolve(response);\n      }\n      else if (response.status === 403){\n        return Promise.reject('You are not an authorized user');\n      }\n      else if (response.status === 401){\n          return Promise.reject('You must be logged in');\n      }\n      else{\n        return Promise.reject('Server error');\n      }\n    });\n};\n\nexport const getStocks = (() => {\n    return fetch('/stocks', {\n      method: 'GET', \n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      else if (response.status === 403){\n        return Promise.reject('You are not an authorized user');\n      }\n      else if (response.status === 401){\n          return Promise.reject('You must be logged in');\n      }\n      else{\n        return Promise.reject('Server error');\n      }    });\n  });\n\nexport const refreshStocks = (() => {\n    return fetch('/refreshstocks', {\n      method: 'GET', \n      credentials: 'include',\n    })\n    .catch( err => {\n      if(err)\n        return Promise.reject({ err: 'network-issue', details: err});\n      else\n        return Promise.reject({ err: 'network-issue', details:\"network error\" });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      else if (response.status === 403){\n        return Promise.reject('You are not an authorized user');\n      }\n      else if (response.status === 401){\n          return Promise.reject('You must be logged in');\n      }\n      else{\n        return Promise.reject('Server error');\n      }\n    });\n  });\n\nexport const updateStock = ({stockname, quantity, equity}) => {\n    return fetch('/stocks', {\n      method: 'PUT',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({stockname, quantity, equity}),\n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => { \n      if( response.ok ) {\n        return Promise.resolve(response);\n      }\n      else if (response.status === 403){\n        return Promise.reject('You are not an authorized user');\n      }\n      else if (response.status === 401){\n          return Promise.reject('You must be logged in');\n      }\n      else{\n        return Promise.reject('Server error');\n      }    });\n  };\n\nexport const deleteStock = ({stockname}) => {\n    return fetch('/stocks', {\n      method: 'DELETE',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({stockname}),\n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => { \n      if( response.ok ) {\n        return Promise.resolve(response);\n      }\n      else if (response.status === 403){\n        return Promise.reject('You are not an authorized user');\n      }\n      else if (response.status === 401){\n          return Promise.reject('You must be logged in');\n      }\n      else{\n        return Promise.reject('Server error');\n      }    });\n  };\n\nexport const logout = () => {\n    return fetch('/logout', {\n      method: 'GET',\n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      else if (response.status === 403){\n        return Promise.reject('You are not an authorized user');\n      }\n      else if (response.status === 401){\n          return Promise.reject('You must be logged in');\n      }\n      else{\n        return Promise.reject('Server error');\n      }    });\n  };\n  \n  \n","\nimport React, { useState } from 'react';\nimport { addUser } from './services';\n\nfunction Login({onLogin , errorMessage, setErrorMessage}){\n    const [username, setUsername] = useState(\"\");\n    //const [errorMessage, setErrorMessage] = useState(\"\");\n\tconst [loginButtonDisabled, setLoginButtonDisabled] = useState(true);\n\t\n    const handleInput = ((inputText) => {\n        setUsername(inputText);\n        if(inputText === \"\"){\n            setLoginButtonDisabled(true);\n        }\n        else{\n            setLoginButtonDisabled(false);\n        }\n    });\n    \n    const onKeyUp = (e) => {\n        if(e.key === 'Enter') {\n            handleUsername();\n        }\n    };\n\n\tconst regExp = /^[a-zA-Z0-9]*$/;\n\n    const handleUsername = (() => {\n\t\tif(username === \"\"){\n\t\t\tsetErrorMessage(\"Username cannot be empty\");\n\t\t}\n\t\telse if(!regExp.test(username)){\n\t\t\tsetErrorMessage(\"Username can only contain alphabets or numbers\");\n\t\t}\n\t\telse{\n\t\t\tsetErrorMessage(\"\");\n\t\t\taddUser({username})\n\t\t\t.then( function(response) {\n\t\t\t\tonLogin(username)\n\t\t\t})\n\t\t\t.catch(function(e) {\n\t\t\t\tif(e.message)\n\t\t\t\t\tsetErrorMessage(e.message);\n\t\t\t\telse\n\t\t\t\t\tsetErrorMessage(\"Error in login\");\n\t\t\t});\n\t\t}\n\t}); \n\n    return (\n\t\t<div className = \"login-page\">\n\t\t\t<div className=\"login-box\">\n\t\t\t\t<h1>Login</h1>\n\t\t\t\t<input type=\"text\" placeholder=\"Enter username\" value={username}\n\t\t\t\t\tonChange={ e => handleInput(e.target.value)} onKeyUp={onKeyUp}/>\n\t\t\t\t<div><span className=\"errorMessage\">{errorMessage}</span></div>\n\t\t\t\t<button id=\"submit-button\" type=\"submit\" disabled={loginButtonDisabled} onClick={handleUsername}>Login</button>\n\t\t\t</div>\n\t\t</div>\t\n  \t);\n }\n\n export default Login;\n","import React, { useState} from 'react';\nimport { updateStock, deleteStock } from './services';\n\nfunction StockList({stocks, relaodStocks, setErrorMessage}){\n\n   const [value, setValue] = useState(0);\n   const [updateButtonDisabled, setUpdateButtonDisabled] = useState(true);\n\n   const handleUpdateStock = ((e) => {\n      const indexString = e.target.id;\n      const index = indexString.split(\"_\")[0];\n      const stockname = stocks[index][\"stockName\"];\n      const quantity = stocks[index][\"quantity\"];\n      const equity = stocks[index][\"equity\"];\n      updateStock({stockname, quantity, equity})\n      .then( () => { \n         setUpdateButtonDisabled(true);\n      })\n      .catch(function(e){\n         setErrorMessage(\"Unable to update stock: \" + e);\n      });\n   });\n\n   const handleQuantityChange = ((e) => {\n      const quantityText = e.target.value;\n      if(quantityText === \"\"){\n         quantityText = 0;\n      }\n      const index = e.target.id;\n      const isnum = /^\\d+$/.test(quantityText);\n      if(isnum){\n         const quantity = parseInt(quantityText);\n         stocks[index][\"quantity\"] = quantity;\n         let equity = stocks[index][\"price\"] * quantity;\n         stocks[index][\"equity\"] = equity.toFixed(2);\n         setUpdateButtonDisabled(false);\n         setValue(++value);\n      }\n   });\n\n   const handlDeleteStock = ((e)=> {\n      const indexString = e.target.id;\n      const index = indexString.split(\"_\")[0];\n      const stockname = stocks[index][\"stockName\"];\n      deleteStock({stockname})\n      .then(()=>{\n         relaodStocks();\n      })\n      .catch(function(e){\n         setErrorMessage(\"Unable to delete stock: \" + e);\n      });\n   });\n\n\treturn (\n   <div>\n   <h2>Your Stock Portfolio</h2>\n   <ol className=\"stock-list\"> \n      <li className=\"stock-item-header\">\n         <div>\n         <div>Stock Symbol</div>\n         <div>Price</div>\n         <div>Last Updated Date and Time</div>\n         <div>Quantity</div>\n         <div>Your Equity</div>\n         <div/>\n      </div> \n      </li>\n   {\n    stocks.map((stockMap,index)=>{\n      const dateTime = new Date(stockMap[\"lastUpdatedDate\"]);\n      const formattedDate = dateTime.getFullYear() + \"-\" + (dateTime.getMonth() + 1) + \"-\" + dateTime.getDate() \n      + \" \" + dateTime.getHours() + \":\" + dateTime.getMinutes() + \":\" + dateTime.getSeconds() ;\n\n      return  <li className=\"stock-item\" key={index}>\n                  <div>\n                  <div>{stockMap[\"stockName\"]}</div>\n                  <div>{stockMap[\"price\"]}</div>\n                  <div>{formattedDate}</div>\n                  <div>\n                     <input className=\"quantity-input\" type=\"text\" id={index} value={stockMap[\"quantity\"]} \n                      onChange={ e => handleQuantityChange(e)}/>\n                     <button  id={index+\"_save\"} disabled={updateButtonDisabled} onClick={handleUpdateStock}>Update</button>\n                  </div>\n                  <div>{stockMap[\"equity\"]}</div>\n                  <div><button id={index+\"_delete\"} onClick={handlDeleteStock}>Delete</button></div>\n                </div> \n             </li>\n          })\n       }\n    </ol>\n    </div>\n\t);\n};\n\nexport default StockList;","import React, { useState } from 'react';\nimport { addStock } from \"./services\";\n\nfunction AddStock({username, relaodStocks}){\n    const [stockname, setStockname] = useState(\"\");\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    \n    const handleChange = ((inputText) => {\n        setStockname(inputText);\n    });\n\n    const handleinput  = (() => {\n        addStock({stockname,username})\n\t\t\t.then( function(response) {\n                setStockname(\"\");\n                setErrorMessage(\"\");\n                relaodStocks();\n\t\t\t})\n\t\t\t.catch(function(e) {\n                setErrorMessage(\"Error in Adding Stock\");\n\t\t\t});\n    });\n\n    return (\n        <div className=\"to-add\">               \n            <input type=\"text\" name=\"text\" value={stockname} placeholder=\"Enter stock symbol to add\" onChange={ e => handleChange(e.target.value)}/>\n            <button type=\"submit\" onClick={handleinput}>Add</button>\n            <div><span className=\"errorMessage\">{errorMessage}</span></div>\n        </div>\n    );\n}\n\nexport default AddStock;\n\n","import React, { useState, useCallback, useEffect } from 'react';\nimport StockList from './StockList';\nimport {getStocks ,refreshStocks} from './services';\nimport AddStock from './AddStock'; \n\nconst REFRESH_TIME_IN_MS = 60000;\n\nfunction StockApp({onLogout, username, errorMessage, setErrorMessage}){\n\n   const [stocks, setStocks] = useState([]);\t\n   //const [errorMessage, setErrorMessage] = useState([]);\n    \n   const relaodStocks = useCallback(() => {\n      getStocks()\n      .then( stocklist => { \n         setStocks(stocklist);\n      })\n      .catch(function(err){\n         setErrorMessage(err);\n      });\n   },[]);\n\n   const handleRefreshStocks = useCallback(() => {\n      refreshStocks()\n      .then( () => { \n         relaodStocks();\n      })\n      .catch(function(err){\n         setErrorMessage(err);\n      });\n   },[]);\n\n   useEffect(() => {\n      if(username){\n         handleRefreshStocks();\n\t\t\tconst intervalId = setInterval( () => {\n\t\t\t\thandleRefreshStocks();\n\t\t\t}, REFRESH_TIME_IN_MS );\n\t\t\treturn function cleanup() {\n\t\t\t\tclearInterval(intervalId);\n         };      \n      }\n   },[]);\n\n\treturn (\n   <div>\n      <div className=\"top-bar\">\n         <span>Logged in : {username}</span>\n         <button onClick={handleRefreshStocks}>Refresh</button>\n         <button onClick={onLogout}>Logout</button>\n      </div>\n      <AddStock username={username} relaodStocks={relaodStocks}/>\n      <StockList stocks={stocks} relaodStocks={relaodStocks} setErrorMessage={setErrorMessage}/>\n   </div>\n\t);\n};\n\nexport default StockApp;","import React, { useState } from 'react';\nimport './App.css';\nimport Login from './Login';\nimport StockApp from './StockApp';\nimport { login, logout} from './services';\n\nfunction App() {\n\tconst [username, setUsername] = useState(\"\");\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\t\n    const onLogin = (username) => {\n\t\tlogin({username})\n\t\t.then( data => {\n\t\t\tsetUsername(username);\n\t\t})\n\t\t.catch( err => {\n\t\t\tsetErrorMessage('Error in user Login');\n\t\t});\n\t};\n\n\tconst onLogout = () => {\n\t\tlogout()\n\t\t.then( () => { \n\t\t\tsetUsername(\"\");\n\t\t})\n\t\t.catch(err => {\n\t\t\tsetErrorMessage('Error in user Logout');\n\t\t});\n\t}\n\n\tif(username){\n\t\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div><span className=\"errorMessage\">{errorMessage}</span></div>\n\t\t\t<StockApp onLogout={onLogout} username={username} errorMessage={errorMessage} setErrorMessage={setErrorMessage}/> \n\t\t</div>\n\t\t);\n \t}\n \telse{\n\t\treturn(\n\t\t<div className=\"App\">\n\t\t\t<Login onLogin={onLogin} errorMessage={errorMessage} setErrorMessage={setErrorMessage}/>\n\t\t</div>\n\t\t);\n \t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}