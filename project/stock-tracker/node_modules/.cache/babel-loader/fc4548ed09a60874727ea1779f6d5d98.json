{"ast":null,"code":"export const login = ({\n  user\n}) => {\n  return fetch('/login', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      user\n    })\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      details: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      details: response.statusCode\n    });\n  });\n};\nexport const addUser = ({\n  username\n}) => {\n  return fetch('/users', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      username\n    })\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      details: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return Promise.resolve(response);\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      details: response.statusCode\n    });\n  });\n};\nexport const addStock = ({\n  stockname,\n  username\n}) => {\n  return fetch('/stocks', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      stockname,\n      username\n    })\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      details: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return Promise.resolve(response);\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      details: response.statusCode\n    });\n  });\n};\nexport const getStocks = () => {\n  return fetch('/stocks', {\n    method: 'GET',\n    credentials: 'include'\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      details: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      details: response.statusCode\n    });\n  });\n};\nexport const logout = () => {\n  return fetch('/logout', {\n    method: 'GET',\n    credentials: 'include'\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      details: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      details: response.statusCode\n    });\n  });\n};","map":{"version":3,"sources":["/Users/vineetkaurbagga/Documents/WebDev_Workspace/stock-tracker/src/services.js"],"names":["login","user","fetch","method","headers","Headers","body","JSON","stringify","catch","err","Promise","reject","details","then","response","ok","json","statusCode","addUser","username","resolve","addStock","stockname","getStocks","credentials","logout"],"mappings":"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","sourcesContent":["export const login = ({user}) => {\n    return fetch('/login', {\n      method: 'POST',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({ user }),\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      return Promise.reject({ err: 'server-error', details: response.statusCode });\n    });\n  };\n  \nexport const addUser = ({username}) => {\n    return fetch('/users', {\n      method: 'POST',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({username}),\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => { \n      if( response.ok ) {\n        return Promise.resolve(response);\n      }\n      return Promise.reject({ err: 'server-error', details: response.statusCode });\n    });\n  };\n\nexport const addStock = ({stockname, username}) => {\n    return fetch('/stocks', {\n      method: 'POST',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({stockname,username}),\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => { \n      if( response.ok ) {\n        return Promise.resolve(response);\n      }\n      return Promise.reject({ err: 'server-error', details: response.statusCode });\n    });\n  };\n\n  export const getStocks = (() => {\n    return fetch('/stocks', {\n      method: 'GET', \n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      return Promise.reject({ err: 'server-error', details: response.statusCode });\n    });\n  });\n\n  export const logout = () => {\n    return fetch('/logout', {\n      method: 'GET',\n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      return Promise.reject({ err: 'server-error', details: response.statusCode });\n    });\n  };\n  \n  \n"]},"metadata":{},"sourceType":"module"}