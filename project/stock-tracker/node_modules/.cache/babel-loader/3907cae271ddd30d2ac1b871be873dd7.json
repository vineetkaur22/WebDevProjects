{"ast":null,"code":"export const login = ({\n  username\n}) => {\n  return fetch('/login', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      username\n    })\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      details: \"network error\"\n    });\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      details: \"server error\"\n    });\n  });\n};\nexport const addUser = ({\n  username\n}) => {\n  return fetch('/users', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      username\n    })\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      details: \"network error\"\n    });\n  }).then(response => {\n    if (response.ok) {\n      return Promise.resolve(response);\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      details: \"server error\"\n    });\n  });\n};\nexport const addStock = ({\n  stockname,\n  username\n}) => {\n  return fetch('/stocks', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      stockname,\n      username\n    }),\n    credentials: 'include'\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      details: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return Promise.resolve(response);\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      details: response\n    });\n  });\n};\nexport const getStocks = () => {\n  return fetch('/stocks', {\n    method: 'GET',\n    credentials: 'include'\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      details: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    } else if (response.status == 403) {\n      return Promise.reject('You are not an authorized user');\n    } else if (response.status == 401) {\n      return Promise.reject('You must be logged in');\n    } else {\n      return Promise.reject('Server error');\n    }\n  });\n};\nexport const refreshStocks = () => {\n  return fetch('/refreshstocks', {\n    method: 'GET',\n    credentials: 'include'\n  }).catch(err => {\n    if (err) return Promise.reject({\n      err: 'network-issue',\n      details: err\n    });else return Promise.reject({\n      err: 'network-issue',\n      details: \"network error\"\n    });\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    } else if (response.status == 403) {\n      return Promise.reject('You are not an authorized user');\n    } else if (response.status == 401) {\n      return Promise.reject('You must be logged in');\n    } else {\n      return Promise.reject('Server error');\n    }\n  });\n};\nexport const updateStock = ({\n  stockname,\n  quantity,\n  equity\n}) => {\n  return fetch('/stocks', {\n    method: 'PUT',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      stockname,\n      quantity,\n      equity\n    }),\n    credentials: 'include'\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      details: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return Promise.resolve(response);\n    } else if (response.status == 403) {\n      return Promise.reject('You are not an authorized user');\n    } else if (response.status == 401) {\n      return Promise.reject('You must be logged in');\n    } else {\n      return Promise.reject('Server error');\n    }\n  });\n};\nexport const deleteStock = ({\n  stockname\n}) => {\n  console.log(\"services\" + stockname);\n  return fetch('/stocks', {\n    method: 'DELETE',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      stockname\n    }),\n    credentials: 'include'\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      details: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return Promise.resolve(response);\n    } else if (response.status == 403) {\n      return Promise.reject('You are not an authorized user');\n    } else if (response.status == 401) {\n      return Promise.reject('You must be logged in');\n    } else {\n      return Promise.reject('Server error');\n    }\n  });\n};\nexport const logout = () => {\n  return fetch('/logout', {\n    method: 'GET',\n    credentials: 'include'\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      details: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    } else if (response.status == 403) {\n      return Promise.reject('You are not an authorized user');\n    } else if (response.status == 401) {\n      return Promise.reject('You must be logged in');\n    } else {\n      return Promise.reject('Server error');\n    }\n  });\n};","map":{"version":3,"sources":["/Users/vineetkaurbagga/Documents/WebDev_Workspace/stock-tracker/src/services.js"],"names":["login","username","fetch","method","headers","Headers","body","JSON","stringify","catch","err","Promise","reject","details","then","response","ok","json","addUser","resolve","addStock","stockname","credentials","getStocks","status","refreshStocks","updateStock","quantity","equity","deleteStock","console","log","logout"],"mappings":"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","sourcesContent":["export const login = ({username}) => {\n    return fetch('/login', {\n      method: 'POST',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({username}),\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: \"network error\" });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      return Promise.reject({ err: 'server-error', details: \"server error\" });\n    });\n  };\n  \nexport const addUser = ({username}) => {\n    return fetch('/users', {\n      method: 'POST',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({username}),\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: \"network error\" });\n    })\n    .then( response => { \n      if( response.ok ) {\n        return Promise.resolve(response);\n      }\n      return Promise.reject({ err: 'server-error', details: \"server error\" });\n    });\n  };\n\nexport const addStock = ({stockname, username}) => {\n    return fetch('/stocks', {\n      method: 'POST',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({stockname,username}),\n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => { \n      if( response.ok ) {\n        return Promise.resolve(response);\n      }\n      return Promise.reject({ err: 'server-error', details: response });\n    });\n  };\n\nexport const getStocks = (() => {\n    return fetch('/stocks', {\n      method: 'GET', \n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      else if (response.status == 403){\n        return Promise.reject('You are not an authorized user');\n      }\n      else if (response.status == 401){\n          return Promise.reject('You must be logged in');\n      }\n      else{\n        return Promise.reject('Server error');\n      }    });\n  });\n\nexport const refreshStocks = (() => {\n    return fetch('/refreshstocks', {\n      method: 'GET', \n      credentials: 'include',\n    })\n    .catch( err => {\n      if(err)\n        return Promise.reject({ err: 'network-issue', details: err});\n      else\n        return Promise.reject({ err: 'network-issue', details:\"network error\" });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      else if (response.status == 403){\n        return Promise.reject('You are not an authorized user');\n      }\n      else if (response.status == 401){\n          return Promise.reject('You must be logged in');\n      }\n      else{\n        return Promise.reject('Server error');\n      }\n    });\n  });\n\nexport const updateStock = ({stockname, quantity, equity}) => {\n    return fetch('/stocks', {\n      method: 'PUT',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({stockname, quantity, equity}),\n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => { \n      if( response.ok ) {\n        return Promise.resolve(response);\n      }\n      else if (response.status == 403){\n        return Promise.reject('You are not an authorized user');\n      }\n      else if (response.status == 401){\n          return Promise.reject('You must be logged in');\n      }\n      else{\n        return Promise.reject('Server error');\n      }    });\n  };\n\nexport const deleteStock = ({stockname}) => {\n    console.log(\"services\" + stockname);\n    return fetch('/stocks', {\n      method: 'DELETE',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({stockname}),\n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => { \n      if( response.ok ) {\n        return Promise.resolve(response);\n      }\n      else if (response.status == 403){\n        return Promise.reject('You are not an authorized user');\n      }\n      else if (response.status == 401){\n          return Promise.reject('You must be logged in');\n      }\n      else{\n        return Promise.reject('Server error');\n      }    });\n  };\n\nexport const logout = () => {\n    return fetch('/logout', {\n      method: 'GET',\n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', details: err });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      else if (response.status == 403){\n        return Promise.reject('You are not an authorized user');\n      }\n      else if (response.status == 401){\n          return Promise.reject('You must be logged in');\n      }\n      else{\n        return Promise.reject('Server error');\n      }    });\n  };\n  \n  \n"]},"metadata":{},"sourceType":"module"}