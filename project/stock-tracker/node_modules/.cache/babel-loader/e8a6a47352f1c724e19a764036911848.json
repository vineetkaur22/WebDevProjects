{"ast":null,"code":"export const login = ({\n  username\n}) => {\n  return fetch('/login', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      username\n    })\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      message: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      message: response.statusCode\n    });\n  });\n};\nexport const addUser = ({\n  username\n}) => {\n  return fetch('/users', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      username\n    })\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      message: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return Promise.resolve(response);\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      detamessageils: response.statusCode\n    });\n  });\n};\nexport const addStock = ({\n  stockname,\n  username\n}) => {\n  return fetch('/stocks', {\n    method: 'POST',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      stockname,\n      username\n    }),\n    credentials: 'include'\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      message: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return Promise.resolve(response);\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      message: response\n    });\n  });\n};\nexport const getStocks = () => {\n  return fetch('/stocks', {\n    method: 'GET',\n    credentials: 'include'\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      message: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      message: response.statusCode\n    });\n  });\n};\nexport const refreshStocks = () => {\n  return fetch('/refreshstocks', {\n    method: 'GET',\n    credentials: 'include'\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      message: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      message: response.statusCode\n    });\n  });\n};\nexport const updateStock = ({\n  stockname,\n  quantity,\n  equity\n}) => {\n  return fetch('/stocks', {\n    method: 'PUT',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      stockname,\n      quantity,\n      equity\n    }),\n    credentials: 'include'\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      message: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return Promise.resolve(response);\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      message: response\n    });\n  });\n};\nexport const deleteStock = ({\n  stockname\n}) => {\n  console.log(\"services\" + stockname);\n  return fetch('/stocks', {\n    method: 'DELETE',\n    headers: new Headers({\n      'content-type': 'application/json'\n    }),\n    body: JSON.stringify({\n      stockname\n    }),\n    credentials: 'include'\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      message: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return Promise.resolve(response);\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      message: response\n    });\n  });\n};\nexport const logout = () => {\n  return fetch('/logout', {\n    method: 'GET',\n    credentials: 'include'\n  }).catch(err => {\n    return Promise.reject({\n      err: 'network-issue',\n      message: err\n    });\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject({\n      err: 'server-error',\n      message: response.statusCode\n    });\n  });\n};","map":{"version":3,"sources":["/Users/vineetkaurbagga/Documents/WebDev_Workspace/stock-tracker/src/services.js"],"names":["login","username","fetch","method","headers","Headers","body","JSON","stringify","catch","err","Promise","reject","message","then","response","ok","json","statusCode","addUser","resolve","detamessageils","addStock","stockname","credentials","getStocks","refreshStocks","updateStock","quantity","equity","deleteStock","console","log","logout"],"mappings":"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","sourcesContent":["export const login = ({username}) => {\n    return fetch('/login', {\n      method: 'POST',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({username}),\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', message: err });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      return Promise.reject({ err: 'server-error', message: response.statusCode });\n    });\n  };\n  \nexport const addUser = ({username}) => {\n    return fetch('/users', {\n      method: 'POST',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({username}),\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', message: err });\n    })\n    .then( response => { \n      if( response.ok ) {\n        return Promise.resolve(response);\n      }\n      return Promise.reject({ err: 'server-error', detamessageils: response.statusCode });\n    });\n  };\n\nexport const addStock = ({stockname, username}) => {\n    return fetch('/stocks', {\n      method: 'POST',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({stockname,username}),\n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', message: err });\n    })\n    .then( response => { \n      if( response.ok ) {\n        return Promise.resolve(response);\n      }\n      return Promise.reject({ err: 'server-error', message: response });\n    });\n  };\n\nexport const getStocks = (() => {\n    return fetch('/stocks', {\n      method: 'GET', \n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', message: err });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      return Promise.reject({ err: 'server-error', message: response.statusCode });\n    });\n  });\n\n\n  export const refreshStocks = (() => {\n    return fetch('/refreshstocks', {\n      method: 'GET', \n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', message: err });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      return Promise.reject({ err: 'server-error', message: response.statusCode });\n    });\n  });\n\nexport const updateStock = ({stockname, quantity, equity}) => {\n    return fetch('/stocks', {\n      method: 'PUT',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({stockname, quantity, equity}),\n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', message: err });\n    })\n    .then( response => { \n      if( response.ok ) {\n        return Promise.resolve(response);\n      }\n      return Promise.reject({ err: 'server-error', message: response });\n    });\n  };\n\n\n\n\nexport const deleteStock = ({stockname}) => {\n    console.log(\"services\" + stockname);\n    return fetch('/stocks', {\n      method: 'DELETE',\n      headers: new Headers({ 'content-type': 'application/json' }),\n      body: JSON.stringify({stockname}),\n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', message: err });\n    })\n    .then( response => { \n      if( response.ok ) {\n        return Promise.resolve(response);\n      }\n      return Promise.reject({ err: 'server-error', message: response });\n    });\n  };\n\nexport const logout = () => {\n    return fetch('/logout', {\n      method: 'GET',\n      credentials: 'include',\n    })\n    .catch( err => {\n      return Promise.reject({ err: 'network-issue', message: err });\n    })\n    .then( response => {\n      if( response.ok ) {\n        return response.json();\n      }\n      return Promise.reject({ err: 'server-error', message: response.statusCode });\n    });\n  };\n  \n  \n"]},"metadata":{},"sourceType":"module"}